// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lkpProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lkpProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lkpMessage {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* File_filetype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommandACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Return_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Return_reflection_ = NULL;
const ::google::protobuf::Descriptor* Return_NodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Return_NodeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* commandID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lkpProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lkpProto_2eproto() {
  protobuf_AddDesc_lkpProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lkpProto.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, testcase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, docker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, tesetcase_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, node_id_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      -1,
      -1,
      -1,
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _is_default_instance_));
  File_descriptor_ = file->message_type(1);
  static const int File_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, file_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, patch_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, content_),
  };
  File_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      -1,
      -1,
      -1,
      sizeof(File),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _is_default_instance_));
  File_filetype_descriptor_ = File_descriptor_->enum_type(0);
  CommandACK_descriptor_ = file->message_type(2);
  static const int CommandACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandACK, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandACK, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandACK, ack_message_),
  };
  CommandACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommandACK_descriptor_,
      CommandACK::default_instance_,
      CommandACK_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommandACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandACK, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandACK, _is_default_instance_));
  HeartBeat_descriptor_ = file->message_type(3);
  static const int HeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, status_),
  };
  HeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _is_default_instance_));
  PushACK_descriptor_ = file->message_type(4);
  static const int PushACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushACK, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushACK, ack_message_),
  };
  PushACK_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PushACK_descriptor_,
      PushACK::default_instance_,
      PushACK_offsets_,
      -1,
      -1,
      -1,
      sizeof(PushACK),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushACK, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushACK, _is_default_instance_));
  Return_descriptor_ = file->message_type(5);
  static const int Return_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return, client_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return, client_ok_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return, node_info_),
  };
  Return_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Return_descriptor_,
      Return::default_instance_,
      Return_offsets_,
      -1,
      -1,
      -1,
      sizeof(Return),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return, _is_default_instance_));
  Return_NodeInfo_descriptor_ = Return_descriptor_->nested_type(0);
  static const int Return_NodeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return_NodeInfo, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return_NodeInfo, node_msg_),
  };
  Return_NodeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Return_NodeInfo_descriptor_,
      Return_NodeInfo::default_instance_,
      Return_NodeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(Return_NodeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return_NodeInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Return_NodeInfo, _is_default_instance_));
  commandID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lkpProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      File_descriptor_, &File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommandACK_descriptor_, &CommandACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PushACK_descriptor_, &PushACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Return_descriptor_, &Return::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Return_NodeInfo_descriptor_, &Return_NodeInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lkpProto_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete File::default_instance_;
  delete File_reflection_;
  delete CommandACK::default_instance_;
  delete CommandACK_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete PushACK::default_instance_;
  delete PushACK_reflection_;
  delete Return::default_instance_;
  delete Return_reflection_;
  delete Return_NodeInfo::default_instance_;
  delete Return_NodeInfo_reflection_;
}

void protobuf_AddDesc_lkpProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lkpProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016lkpProto.proto\022\nlkpMessage\"\177\n\007Command\022"
    "&\n\007command\030\001 \001(\0162\025.lkpMessage.commandID\022"
    "\020\n\010testcase\030\002 \001(\t\022\022\n\ndocker_num\030\003 \001(\r\022\025\n"
    "\rtesetcase_len\030\004 \001(\r\022\017\n\007node_id\030\005 \001(\r\"\243\001"
    "\n\004File\022,\n\tfile_type\030\001 \001(\0162\031.lkpMessage.F"
    "ile.filetype\022\021\n\tfile_name\030\002 \001(\t\022\020\n\010file_"
    "len\030\003 \001(\r\022\021\n\tpatch_num\030\004 \001(\r\022\017\n\007content\030"
    "\005 \001(\014\"$\n\010filetype\022\014\n\010TESTCASE\020\000\022\n\n\006RESUL"
    "T\020\001\"Y\n\nCommandACK\022\016\n\006status\030\001 \001(\010\022&\n\007com"
    "mand\030\002 \001(\0162\025.lkpMessage.commandID\022\023\n\013ack"
    "_message\030\003 \001(\t\"\033\n\tHeartBeat\022\016\n\006status\030\001 "
    "\001(\010\".\n\007PushACK\022\016\n\006status\030\001 \001(\010\022\023\n\013ack_me"
    "ssage\030\002 \001(\t\"\272\001\n\006Return\022\022\n\nclient_num\030\001 \001"
    "(\r\022\025\n\rclient_ok_num\030\002 \001(\r\022&\n\007command\030\003 \001"
    "(\0162\025.lkpMessage.commandID\022.\n\tnode_info\030\004"
    " \003(\0132\033.lkpMessage.Return.NodeInfo\032-\n\010Nod"
    "eInfo\022\017\n\007node_id\030\001 \001(\r\022\020\n\010node_msg\030\002 \001(\t"
    "*@\n\tcommandID\022\n\n\006UPDATE\020\000\022\007\n\003RUN\020\001\022\n\n\006RE"
    "SULT\020\002\022\010\n\004PUSH\020\003\022\010\n\004LIST\020\004b\006proto3", 754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lkpProto.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  File::default_instance_ = new File();
  CommandACK::default_instance_ = new CommandACK();
  HeartBeat::default_instance_ = new HeartBeat();
  PushACK::default_instance_ = new PushACK();
  Return::default_instance_ = new Return();
  Return_NodeInfo::default_instance_ = new Return_NodeInfo();
  Command::default_instance_->InitAsDefaultInstance();
  File::default_instance_->InitAsDefaultInstance();
  CommandACK::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  PushACK::default_instance_->InitAsDefaultInstance();
  Return::default_instance_->InitAsDefaultInstance();
  Return_NodeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lkpProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lkpProto_2eproto {
  StaticDescriptorInitializer_lkpProto_2eproto() {
    protobuf_AddDesc_lkpProto_2eproto();
  }
} static_descriptor_initializer_lkpProto_2eproto_;
const ::google::protobuf::EnumDescriptor* commandID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return commandID_descriptor_;
}
bool commandID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCommandFieldNumber;
const int Command::kTestcaseFieldNumber;
const int Command::kDockerNumFieldNumber;
const int Command::kTesetcaseLenFieldNumber;
const int Command::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkpMessage.Command)
}

void Command::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkpMessage.Command)
}

void Command::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = 0;
  testcase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docker_num_ = 0u;
  tesetcase_len_ = 0u;
  node_id_ = 0u;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:lkpMessage.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  testcase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpProto_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:lkpMessage.Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(command_, node_id_);
  testcase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkpMessage.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lkpMessage.commandID command = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::lkpMessage::commandID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_testcase;
        break;
      }

      // optional string testcase = 2;
      case 2: {
        if (tag == 18) {
         parse_testcase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_testcase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->testcase().data(), this->testcase().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkpMessage.Command.testcase"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_docker_num;
        break;
      }

      // optional uint32 docker_num = 3;
      case 3: {
        if (tag == 24) {
         parse_docker_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &docker_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tesetcase_len;
        break;
      }

      // optional uint32 tesetcase_len = 4;
      case 4: {
        if (tag == 32) {
         parse_tesetcase_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tesetcase_len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_node_id;
        break;
      }

      // optional uint32 node_id = 5;
      case 5: {
        if (tag == 40) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkpMessage.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkpMessage.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkpMessage.Command)
  // optional .lkpMessage.commandID command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional string testcase = 2;
  if (this->testcase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->testcase().data(), this->testcase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.Command.testcase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->testcase(), output);
  }

  // optional uint32 docker_num = 3;
  if (this->docker_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->docker_num(), output);
  }

  // optional uint32 tesetcase_len = 4;
  if (this->tesetcase_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tesetcase_len(), output);
  }

  // optional uint32 node_id = 5;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->node_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkpMessage.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkpMessage.Command)
  // optional .lkpMessage.commandID command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional string testcase = 2;
  if (this->testcase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->testcase().data(), this->testcase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.Command.testcase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->testcase(), target);
  }

  // optional uint32 docker_num = 3;
  if (this->docker_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->docker_num(), target);
  }

  // optional uint32 tesetcase_len = 4;
  if (this->tesetcase_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tesetcase_len(), target);
  }

  // optional uint32 node_id = 5;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->node_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkpMessage.Command)
  return target;
}

int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkpMessage.Command)
  int total_size = 0;

  // optional .lkpMessage.commandID command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // optional string testcase = 2;
  if (this->testcase().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->testcase());
  }

  // optional uint32 docker_num = 3;
  if (this->docker_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->docker_num());
  }

  // optional uint32 tesetcase_len = 4;
  if (this->tesetcase_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tesetcase_len());
  }

  // optional uint32 node_id = 5;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkpMessage.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkpMessage.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkpMessage.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkpMessage.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.testcase().size() > 0) {

    testcase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.testcase_);
  }
  if (from.docker_num() != 0) {
    set_docker_num(from.docker_num());
  }
  if (from.tesetcase_len() != 0) {
    set_tesetcase_len(from.tesetcase_len());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkpMessage.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkpMessage.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(command_, other->command_);
  testcase_.Swap(&other->testcase_);
  std::swap(docker_num_, other->docker_num_);
  std::swap(tesetcase_len_, other->tesetcase_len_);
  std::swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional .lkpMessage.commandID command = 1;
void Command::clear_command() {
  command_ = 0;
}
 ::lkpMessage::commandID Command::command() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Command.command)
  return static_cast< ::lkpMessage::commandID >(command_);
}
 void Command::set_command(::lkpMessage::commandID value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Command.command)
}

// optional string testcase = 2;
void Command::clear_testcase() {
  testcase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Command::testcase() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Command.testcase)
  return testcase_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Command::set_testcase(const ::std::string& value) {
  
  testcase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkpMessage.Command.testcase)
}
 void Command::set_testcase(const char* value) {
  
  testcase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkpMessage.Command.testcase)
}
 void Command::set_testcase(const char* value, size_t size) {
  
  testcase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkpMessage.Command.testcase)
}
 ::std::string* Command::mutable_testcase() {
  
  // @@protoc_insertion_point(field_mutable:lkpMessage.Command.testcase)
  return testcase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Command::release_testcase() {
  // @@protoc_insertion_point(field_release:lkpMessage.Command.testcase)
  
  return testcase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Command::set_allocated_testcase(::std::string* testcase) {
  if (testcase != NULL) {
    
  } else {
    
  }
  testcase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), testcase);
  // @@protoc_insertion_point(field_set_allocated:lkpMessage.Command.testcase)
}

// optional uint32 docker_num = 3;
void Command::clear_docker_num() {
  docker_num_ = 0u;
}
 ::google::protobuf::uint32 Command::docker_num() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Command.docker_num)
  return docker_num_;
}
 void Command::set_docker_num(::google::protobuf::uint32 value) {
  
  docker_num_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Command.docker_num)
}

// optional uint32 tesetcase_len = 4;
void Command::clear_tesetcase_len() {
  tesetcase_len_ = 0u;
}
 ::google::protobuf::uint32 Command::tesetcase_len() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Command.tesetcase_len)
  return tesetcase_len_;
}
 void Command::set_tesetcase_len(::google::protobuf::uint32 value) {
  
  tesetcase_len_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Command.tesetcase_len)
}

// optional uint32 node_id = 5;
void Command::clear_node_id() {
  node_id_ = 0u;
}
 ::google::protobuf::uint32 Command::node_id() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Command.node_id)
  return node_id_;
}
 void Command::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Command.node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* File_filetype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_filetype_descriptor_;
}
bool File_filetype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const File_filetype File::TESTCASE;
const File_filetype File::RESULT;
const File_filetype File::filetype_MIN;
const File_filetype File::filetype_MAX;
const int File::filetype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int File::kFileTypeFieldNumber;
const int File::kFileNameFieldNumber;
const int File::kFileLenFieldNumber;
const int File::kPatchNumFieldNumber;
const int File::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

File::File()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkpMessage.File)
}

void File::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

File::File(const File& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkpMessage.File)
}

void File::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_type_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_len_ = 0u;
  patch_num_ = 0u;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

File::~File() {
  // @@protoc_insertion_point(destructor:lkpMessage.File)
  SharedDtor();
}

void File::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpProto_2eproto();
  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New(::google::protobuf::Arena* arena) const {
  File* n = new File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:lkpMessage.File)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(File, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<File*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(file_type_, file_len_);
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patch_num_ = 0u;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkpMessage.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lkpMessage.File.filetype file_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_file_type(static_cast< ::lkpMessage::File_filetype >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (tag == 18) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkpMessage.File.file_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_len;
        break;
      }

      // optional uint32 file_len = 3;
      case 3: {
        if (tag == 24) {
         parse_file_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_patch_num;
        break;
      }

      // optional uint32 patch_num = 4;
      case 4: {
        if (tag == 32) {
         parse_patch_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patch_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional bytes content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkpMessage.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkpMessage.File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkpMessage.File)
  // optional .lkpMessage.File.filetype file_type = 1;
  if (this->file_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->file_type(), output);
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.File.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional uint32 file_len = 3;
  if (this->file_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_len(), output);
  }

  // optional uint32 patch_num = 4;
  if (this->patch_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->patch_num(), output);
  }

  // optional bytes content = 5;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkpMessage.File)
}

::google::protobuf::uint8* File::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkpMessage.File)
  // optional .lkpMessage.File.filetype file_type = 1;
  if (this->file_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->file_type(), target);
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.File.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional uint32 file_len = 3;
  if (this->file_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_len(), target);
  }

  // optional uint32 patch_num = 4;
  if (this->patch_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->patch_num(), target);
  }

  // optional bytes content = 5;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkpMessage.File)
  return target;
}

int File::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkpMessage.File)
  int total_size = 0;

  // optional .lkpMessage.File.filetype file_type = 1;
  if (this->file_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // optional uint32 file_len = 3;
  if (this->file_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_len());
  }

  // optional uint32 patch_num = 4;
  if (this->patch_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->patch_num());
  }

  // optional bytes content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkpMessage.File)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const File* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const File>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkpMessage.File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkpMessage.File)
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkpMessage.File)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_type() != 0) {
    set_file_type(from.file_type());
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_len() != 0) {
    set_file_len(from.file_len());
  }
  if (from.patch_num() != 0) {
    set_patch_num(from.patch_num());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkpMessage.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkpMessage.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {

  return true;
}

void File::Swap(File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void File::InternalSwap(File* other) {
  std::swap(file_type_, other->file_type_);
  file_name_.Swap(&other->file_name_);
  std::swap(file_len_, other->file_len_);
  std::swap(patch_num_, other->patch_num_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// File

// optional .lkpMessage.File.filetype file_type = 1;
void File::clear_file_type() {
  file_type_ = 0;
}
 ::lkpMessage::File_filetype File::file_type() const {
  // @@protoc_insertion_point(field_get:lkpMessage.File.file_type)
  return static_cast< ::lkpMessage::File_filetype >(file_type_);
}
 void File::set_file_type(::lkpMessage::File_filetype value) {
  
  file_type_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.File.file_type)
}

// optional string file_name = 2;
void File::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& File::file_name() const {
  // @@protoc_insertion_point(field_get:lkpMessage.File.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void File::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkpMessage.File.file_name)
}
 void File::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkpMessage.File.file_name)
}
 void File::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkpMessage.File.file_name)
}
 ::std::string* File::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:lkpMessage.File.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* File::release_file_name() {
  // @@protoc_insertion_point(field_release:lkpMessage.File.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void File::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:lkpMessage.File.file_name)
}

// optional uint32 file_len = 3;
void File::clear_file_len() {
  file_len_ = 0u;
}
 ::google::protobuf::uint32 File::file_len() const {
  // @@protoc_insertion_point(field_get:lkpMessage.File.file_len)
  return file_len_;
}
 void File::set_file_len(::google::protobuf::uint32 value) {
  
  file_len_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.File.file_len)
}

// optional uint32 patch_num = 4;
void File::clear_patch_num() {
  patch_num_ = 0u;
}
 ::google::protobuf::uint32 File::patch_num() const {
  // @@protoc_insertion_point(field_get:lkpMessage.File.patch_num)
  return patch_num_;
}
 void File::set_patch_num(::google::protobuf::uint32 value) {
  
  patch_num_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.File.patch_num)
}

// optional bytes content = 5;
void File::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& File::content() const {
  // @@protoc_insertion_point(field_get:lkpMessage.File.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void File::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkpMessage.File.content)
}
 void File::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkpMessage.File.content)
}
 void File::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkpMessage.File.content)
}
 ::std::string* File::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:lkpMessage.File.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* File::release_content() {
  // @@protoc_insertion_point(field_release:lkpMessage.File.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void File::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:lkpMessage.File.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandACK::kStatusFieldNumber;
const int CommandACK::kCommandFieldNumber;
const int CommandACK::kAckMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandACK::CommandACK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkpMessage.CommandACK)
}

void CommandACK::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommandACK::CommandACK(const CommandACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkpMessage.CommandACK)
}

void CommandACK::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = false;
  command_ = 0;
  ack_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CommandACK::~CommandACK() {
  // @@protoc_insertion_point(destructor:lkpMessage.CommandACK)
  SharedDtor();
}

void CommandACK::SharedDtor() {
  ack_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CommandACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandACK_descriptor_;
}

const CommandACK& CommandACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpProto_2eproto();
  return *default_instance_;
}

CommandACK* CommandACK::default_instance_ = NULL;

CommandACK* CommandACK::New(::google::protobuf::Arena* arena) const {
  CommandACK* n = new CommandACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandACK::Clear() {
// @@protoc_insertion_point(message_clear_start:lkpMessage.CommandACK)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommandACK, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommandACK*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, command_);
  ack_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CommandACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkpMessage.CommandACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command;
        break;
      }

      // optional .lkpMessage.commandID command = 2;
      case 2: {
        if (tag == 16) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::lkpMessage::commandID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ack_message;
        break;
      }

      // optional string ack_message = 3;
      case 3: {
        if (tag == 26) {
         parse_ack_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ack_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_message().data(), this->ack_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkpMessage.CommandACK.ack_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkpMessage.CommandACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkpMessage.CommandACK)
  return false;
#undef DO_
}

void CommandACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkpMessage.CommandACK)
  // optional bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // optional .lkpMessage.commandID command = 2;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command(), output);
  }

  // optional string ack_message = 3;
  if (this->ack_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_message().data(), this->ack_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.CommandACK.ack_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ack_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkpMessage.CommandACK)
}

::google::protobuf::uint8* CommandACK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkpMessage.CommandACK)
  // optional bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // optional .lkpMessage.commandID command = 2;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command(), target);
  }

  // optional string ack_message = 3;
  if (this->ack_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_message().data(), this->ack_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.CommandACK.ack_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ack_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkpMessage.CommandACK)
  return target;
}

int CommandACK::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkpMessage.CommandACK)
  int total_size = 0;

  // optional bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // optional .lkpMessage.commandID command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // optional string ack_message = 3;
  if (this->ack_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ack_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandACK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkpMessage.CommandACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommandACK* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandACK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkpMessage.CommandACK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkpMessage.CommandACK)
    MergeFrom(*source);
  }
}

void CommandACK::MergeFrom(const CommandACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkpMessage.CommandACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.ack_message().size() > 0) {

    ack_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ack_message_);
  }
}

void CommandACK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkpMessage.CommandACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandACK::CopyFrom(const CommandACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkpMessage.CommandACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandACK::IsInitialized() const {

  return true;
}

void CommandACK::Swap(CommandACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandACK::InternalSwap(CommandACK* other) {
  std::swap(status_, other->status_);
  std::swap(command_, other->command_);
  ack_message_.Swap(&other->ack_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandACK_descriptor_;
  metadata.reflection = CommandACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandACK

// optional bool status = 1;
void CommandACK::clear_status() {
  status_ = false;
}
 bool CommandACK::status() const {
  // @@protoc_insertion_point(field_get:lkpMessage.CommandACK.status)
  return status_;
}
 void CommandACK::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.CommandACK.status)
}

// optional .lkpMessage.commandID command = 2;
void CommandACK::clear_command() {
  command_ = 0;
}
 ::lkpMessage::commandID CommandACK::command() const {
  // @@protoc_insertion_point(field_get:lkpMessage.CommandACK.command)
  return static_cast< ::lkpMessage::commandID >(command_);
}
 void CommandACK::set_command(::lkpMessage::commandID value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.CommandACK.command)
}

// optional string ack_message = 3;
void CommandACK::clear_ack_message() {
  ack_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CommandACK::ack_message() const {
  // @@protoc_insertion_point(field_get:lkpMessage.CommandACK.ack_message)
  return ack_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommandACK::set_ack_message(const ::std::string& value) {
  
  ack_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkpMessage.CommandACK.ack_message)
}
 void CommandACK::set_ack_message(const char* value) {
  
  ack_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkpMessage.CommandACK.ack_message)
}
 void CommandACK::set_ack_message(const char* value, size_t size) {
  
  ack_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkpMessage.CommandACK.ack_message)
}
 ::std::string* CommandACK::mutable_ack_message() {
  
  // @@protoc_insertion_point(field_mutable:lkpMessage.CommandACK.ack_message)
  return ack_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommandACK::release_ack_message() {
  // @@protoc_insertion_point(field_release:lkpMessage.CommandACK.ack_message)
  
  return ack_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommandACK::set_allocated_ack_message(::std::string* ack_message) {
  if (ack_message != NULL) {
    
  } else {
    
  }
  ack_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ack_message);
  // @@protoc_insertion_point(field_set_allocated:lkpMessage.CommandACK.ack_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeat::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkpMessage.HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkpMessage.HeartBeat)
}

void HeartBeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = false;
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:lkpMessage.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpProto_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:lkpMessage.HeartBeat)
  status_ = false;
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkpMessage.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkpMessage.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkpMessage.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkpMessage.HeartBeat)
  // optional bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkpMessage.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkpMessage.HeartBeat)
  // optional bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkpMessage.HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkpMessage.HeartBeat)
  int total_size = 0;

  // optional bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkpMessage.HeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkpMessage.HeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkpMessage.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkpMessage.HeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkpMessage.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkpMessage.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

// optional bool status = 1;
void HeartBeat::clear_status() {
  status_ = false;
}
 bool HeartBeat::status() const {
  // @@protoc_insertion_point(field_get:lkpMessage.HeartBeat.status)
  return status_;
}
 void HeartBeat::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.HeartBeat.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushACK::kStatusFieldNumber;
const int PushACK::kAckMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushACK::PushACK()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkpMessage.PushACK)
}

void PushACK::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PushACK::PushACK(const PushACK& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkpMessage.PushACK)
}

void PushACK::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = false;
  ack_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PushACK::~PushACK() {
  // @@protoc_insertion_point(destructor:lkpMessage.PushACK)
  SharedDtor();
}

void PushACK::SharedDtor() {
  ack_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PushACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushACK_descriptor_;
}

const PushACK& PushACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpProto_2eproto();
  return *default_instance_;
}

PushACK* PushACK::default_instance_ = NULL;

PushACK* PushACK::New(::google::protobuf::Arena* arena) const {
  PushACK* n = new PushACK;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushACK::Clear() {
// @@protoc_insertion_point(message_clear_start:lkpMessage.PushACK)
  status_ = false;
  ack_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PushACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkpMessage.PushACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ack_message;
        break;
      }

      // optional string ack_message = 2;
      case 2: {
        if (tag == 18) {
         parse_ack_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ack_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_message().data(), this->ack_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkpMessage.PushACK.ack_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkpMessage.PushACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkpMessage.PushACK)
  return false;
#undef DO_
}

void PushACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkpMessage.PushACK)
  // optional bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // optional string ack_message = 2;
  if (this->ack_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_message().data(), this->ack_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.PushACK.ack_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ack_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkpMessage.PushACK)
}

::google::protobuf::uint8* PushACK::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkpMessage.PushACK)
  // optional bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // optional string ack_message = 2;
  if (this->ack_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_message().data(), this->ack_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.PushACK.ack_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ack_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkpMessage.PushACK)
  return target;
}

int PushACK::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkpMessage.PushACK)
  int total_size = 0;

  // optional bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // optional string ack_message = 2;
  if (this->ack_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ack_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushACK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkpMessage.PushACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PushACK* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PushACK>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkpMessage.PushACK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkpMessage.PushACK)
    MergeFrom(*source);
  }
}

void PushACK::MergeFrom(const PushACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkpMessage.PushACK)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.ack_message().size() > 0) {

    ack_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ack_message_);
  }
}

void PushACK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkpMessage.PushACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushACK::CopyFrom(const PushACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkpMessage.PushACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushACK::IsInitialized() const {

  return true;
}

void PushACK::Swap(PushACK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushACK::InternalSwap(PushACK* other) {
  std::swap(status_, other->status_);
  ack_message_.Swap(&other->ack_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushACK_descriptor_;
  metadata.reflection = PushACK_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushACK

// optional bool status = 1;
void PushACK::clear_status() {
  status_ = false;
}
 bool PushACK::status() const {
  // @@protoc_insertion_point(field_get:lkpMessage.PushACK.status)
  return status_;
}
 void PushACK::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.PushACK.status)
}

// optional string ack_message = 2;
void PushACK::clear_ack_message() {
  ack_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PushACK::ack_message() const {
  // @@protoc_insertion_point(field_get:lkpMessage.PushACK.ack_message)
  return ack_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PushACK::set_ack_message(const ::std::string& value) {
  
  ack_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkpMessage.PushACK.ack_message)
}
 void PushACK::set_ack_message(const char* value) {
  
  ack_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkpMessage.PushACK.ack_message)
}
 void PushACK::set_ack_message(const char* value, size_t size) {
  
  ack_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkpMessage.PushACK.ack_message)
}
 ::std::string* PushACK::mutable_ack_message() {
  
  // @@protoc_insertion_point(field_mutable:lkpMessage.PushACK.ack_message)
  return ack_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PushACK::release_ack_message() {
  // @@protoc_insertion_point(field_release:lkpMessage.PushACK.ack_message)
  
  return ack_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PushACK::set_allocated_ack_message(::std::string* ack_message) {
  if (ack_message != NULL) {
    
  } else {
    
  }
  ack_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ack_message);
  // @@protoc_insertion_point(field_set_allocated:lkpMessage.PushACK.ack_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Return_NodeInfo::kNodeIdFieldNumber;
const int Return_NodeInfo::kNodeMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Return_NodeInfo::Return_NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkpMessage.Return.NodeInfo)
}

void Return_NodeInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Return_NodeInfo::Return_NodeInfo(const Return_NodeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkpMessage.Return.NodeInfo)
}

void Return_NodeInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = 0u;
  node_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Return_NodeInfo::~Return_NodeInfo() {
  // @@protoc_insertion_point(destructor:lkpMessage.Return.NodeInfo)
  SharedDtor();
}

void Return_NodeInfo::SharedDtor() {
  node_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Return_NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Return_NodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Return_NodeInfo_descriptor_;
}

const Return_NodeInfo& Return_NodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpProto_2eproto();
  return *default_instance_;
}

Return_NodeInfo* Return_NodeInfo::default_instance_ = NULL;

Return_NodeInfo* Return_NodeInfo::New(::google::protobuf::Arena* arena) const {
  Return_NodeInfo* n = new Return_NodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Return_NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lkpMessage.Return.NodeInfo)
  node_id_ = 0u;
  node_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Return_NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkpMessage.Return.NodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_msg;
        break;
      }

      // optional string node_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_node_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_msg().data(), this->node_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lkpMessage.Return.NodeInfo.node_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkpMessage.Return.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkpMessage.Return.NodeInfo)
  return false;
#undef DO_
}

void Return_NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkpMessage.Return.NodeInfo)
  // optional uint32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional string node_msg = 2;
  if (this->node_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_msg().data(), this->node_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.Return.NodeInfo.node_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:lkpMessage.Return.NodeInfo)
}

::google::protobuf::uint8* Return_NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkpMessage.Return.NodeInfo)
  // optional uint32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional string node_msg = 2;
  if (this->node_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_msg().data(), this->node_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lkpMessage.Return.NodeInfo.node_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkpMessage.Return.NodeInfo)
  return target;
}

int Return_NodeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkpMessage.Return.NodeInfo)
  int total_size = 0;

  // optional uint32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());
  }

  // optional string node_msg = 2;
  if (this->node_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Return_NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkpMessage.Return.NodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Return_NodeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Return_NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkpMessage.Return.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkpMessage.Return.NodeInfo)
    MergeFrom(*source);
  }
}

void Return_NodeInfo::MergeFrom(const Return_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkpMessage.Return.NodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.node_msg().size() > 0) {

    node_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_msg_);
  }
}

void Return_NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkpMessage.Return.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Return_NodeInfo::CopyFrom(const Return_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkpMessage.Return.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Return_NodeInfo::IsInitialized() const {

  return true;
}

void Return_NodeInfo::Swap(Return_NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Return_NodeInfo::InternalSwap(Return_NodeInfo* other) {
  std::swap(node_id_, other->node_id_);
  node_msg_.Swap(&other->node_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Return_NodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Return_NodeInfo_descriptor_;
  metadata.reflection = Return_NodeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Return::kClientNumFieldNumber;
const int Return::kClientOkNumFieldNumber;
const int Return::kCommandFieldNumber;
const int Return::kNodeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Return::Return()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lkpMessage.Return)
}

void Return::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Return::Return(const Return& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lkpMessage.Return)
}

void Return::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_num_ = 0u;
  client_ok_num_ = 0u;
  command_ = 0;
}

Return::~Return() {
  // @@protoc_insertion_point(destructor:lkpMessage.Return)
  SharedDtor();
}

void Return::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Return::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Return::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Return_descriptor_;
}

const Return& Return::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpProto_2eproto();
  return *default_instance_;
}

Return* Return::default_instance_ = NULL;

Return* Return::New(::google::protobuf::Arena* arena) const {
  Return* n = new Return;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Return::Clear() {
// @@protoc_insertion_point(message_clear_start:lkpMessage.Return)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Return, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Return*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(client_num_, client_ok_num_);
  command_ = 0;

#undef ZR_HELPER_
#undef ZR_

  node_info_.Clear();
}

bool Return::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lkpMessage.Return)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_ok_num;
        break;
      }

      // optional uint32 client_ok_num = 2;
      case 2: {
        if (tag == 16) {
         parse_client_ok_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ok_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_command;
        break;
      }

      // optional .lkpMessage.commandID command = 3;
      case 3: {
        if (tag == 24) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::lkpMessage::commandID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_node_info;
        break;
      }

      // repeated .lkpMessage.Return.NodeInfo node_info = 4;
      case 4: {
        if (tag == 34) {
         parse_node_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_node_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lkpMessage.Return)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lkpMessage.Return)
  return false;
#undef DO_
}

void Return::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lkpMessage.Return)
  // optional uint32 client_num = 1;
  if (this->client_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_num(), output);
  }

  // optional uint32 client_ok_num = 2;
  if (this->client_ok_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_ok_num(), output);
  }

  // optional .lkpMessage.commandID command = 3;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->command(), output);
  }

  // repeated .lkpMessage.Return.NodeInfo node_info = 4;
  for (unsigned int i = 0, n = this->node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node_info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lkpMessage.Return)
}

::google::protobuf::uint8* Return::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lkpMessage.Return)
  // optional uint32 client_num = 1;
  if (this->client_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_num(), target);
  }

  // optional uint32 client_ok_num = 2;
  if (this->client_ok_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_ok_num(), target);
  }

  // optional .lkpMessage.commandID command = 3;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->command(), target);
  }

  // repeated .lkpMessage.Return.NodeInfo node_info = 4;
  for (unsigned int i = 0, n = this->node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->node_info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lkpMessage.Return)
  return target;
}

int Return::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lkpMessage.Return)
  int total_size = 0;

  // optional uint32 client_num = 1;
  if (this->client_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_num());
  }

  // optional uint32 client_ok_num = 2;
  if (this->client_ok_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_ok_num());
  }

  // optional .lkpMessage.commandID command = 3;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // repeated .lkpMessage.Return.NodeInfo node_info = 4;
  total_size += 1 * this->node_info_size();
  for (int i = 0; i < this->node_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Return::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lkpMessage.Return)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Return* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Return>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lkpMessage.Return)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lkpMessage.Return)
    MergeFrom(*source);
  }
}

void Return::MergeFrom(const Return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lkpMessage.Return)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_info_.MergeFrom(from.node_info_);
  if (from.client_num() != 0) {
    set_client_num(from.client_num());
  }
  if (from.client_ok_num() != 0) {
    set_client_ok_num(from.client_ok_num());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void Return::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lkpMessage.Return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Return::CopyFrom(const Return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lkpMessage.Return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Return::IsInitialized() const {

  return true;
}

void Return::Swap(Return* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Return::InternalSwap(Return* other) {
  std::swap(client_num_, other->client_num_);
  std::swap(client_ok_num_, other->client_ok_num_);
  std::swap(command_, other->command_);
  node_info_.UnsafeArenaSwap(&other->node_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Return::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Return_descriptor_;
  metadata.reflection = Return_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Return_NodeInfo

// optional uint32 node_id = 1;
void Return_NodeInfo::clear_node_id() {
  node_id_ = 0u;
}
 ::google::protobuf::uint32 Return_NodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Return.NodeInfo.node_id)
  return node_id_;
}
 void Return_NodeInfo::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Return.NodeInfo.node_id)
}

// optional string node_msg = 2;
void Return_NodeInfo::clear_node_msg() {
  node_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Return_NodeInfo::node_msg() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Return.NodeInfo.node_msg)
  return node_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Return_NodeInfo::set_node_msg(const ::std::string& value) {
  
  node_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lkpMessage.Return.NodeInfo.node_msg)
}
 void Return_NodeInfo::set_node_msg(const char* value) {
  
  node_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lkpMessage.Return.NodeInfo.node_msg)
}
 void Return_NodeInfo::set_node_msg(const char* value, size_t size) {
  
  node_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lkpMessage.Return.NodeInfo.node_msg)
}
 ::std::string* Return_NodeInfo::mutable_node_msg() {
  
  // @@protoc_insertion_point(field_mutable:lkpMessage.Return.NodeInfo.node_msg)
  return node_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Return_NodeInfo::release_node_msg() {
  // @@protoc_insertion_point(field_release:lkpMessage.Return.NodeInfo.node_msg)
  
  return node_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Return_NodeInfo::set_allocated_node_msg(::std::string* node_msg) {
  if (node_msg != NULL) {
    
  } else {
    
  }
  node_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_msg);
  // @@protoc_insertion_point(field_set_allocated:lkpMessage.Return.NodeInfo.node_msg)
}

// -------------------------------------------------------------------

// Return

// optional uint32 client_num = 1;
void Return::clear_client_num() {
  client_num_ = 0u;
}
 ::google::protobuf::uint32 Return::client_num() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Return.client_num)
  return client_num_;
}
 void Return::set_client_num(::google::protobuf::uint32 value) {
  
  client_num_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Return.client_num)
}

// optional uint32 client_ok_num = 2;
void Return::clear_client_ok_num() {
  client_ok_num_ = 0u;
}
 ::google::protobuf::uint32 Return::client_ok_num() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Return.client_ok_num)
  return client_ok_num_;
}
 void Return::set_client_ok_num(::google::protobuf::uint32 value) {
  
  client_ok_num_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Return.client_ok_num)
}

// optional .lkpMessage.commandID command = 3;
void Return::clear_command() {
  command_ = 0;
}
 ::lkpMessage::commandID Return::command() const {
  // @@protoc_insertion_point(field_get:lkpMessage.Return.command)
  return static_cast< ::lkpMessage::commandID >(command_);
}
 void Return::set_command(::lkpMessage::commandID value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:lkpMessage.Return.command)
}

// repeated .lkpMessage.Return.NodeInfo node_info = 4;
int Return::node_info_size() const {
  return node_info_.size();
}
void Return::clear_node_info() {
  node_info_.Clear();
}
const ::lkpMessage::Return_NodeInfo& Return::node_info(int index) const {
  // @@protoc_insertion_point(field_get:lkpMessage.Return.node_info)
  return node_info_.Get(index);
}
::lkpMessage::Return_NodeInfo* Return::mutable_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:lkpMessage.Return.node_info)
  return node_info_.Mutable(index);
}
::lkpMessage::Return_NodeInfo* Return::add_node_info() {
  // @@protoc_insertion_point(field_add:lkpMessage.Return.node_info)
  return node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::lkpMessage::Return_NodeInfo >*
Return::mutable_node_info() {
  // @@protoc_insertion_point(field_mutable_list:lkpMessage.Return.node_info)
  return &node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::lkpMessage::Return_NodeInfo >&
Return::node_info() const {
  // @@protoc_insertion_point(field_list:lkpMessage.Return.node_info)
  return node_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lkpMessage

// @@protoc_insertion_point(global_scope)
