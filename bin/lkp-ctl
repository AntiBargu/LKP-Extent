#!/bin/bash

usage() {
    subcommand_show(){
        for cmd in $(ls $ROOT_DIR/sbin);do
            eval $(sed -n '/^help_doc=\"/p' $ROOT_DIR/sbin/$cmd)
            lkp_print "\t$cmd\t$help_doc\n"
        done
    }

    lkp_show "Usage: $1 [OPTION] COMMAND [arg0 ...]"
    lkp_print "\nA enhance lkp for containers\n"
    lkp_print "\nOptions:\n"
    lkp_print "\t-a specify all node to run case\n"
    lkp_print "\t-c set the number of containers per node, default: 0\n"
    lkp_print "\t-i specify the node to run case (nodeid), default: current node\n"
    lkp_print "\t-d enable debug mode\n"
    lkp_print "\t-h list help\n"
    lkp_print "\nCOMMAND:\n"
    subcommand_show
    lkp_print "\nTo get more help, Please see the README.md\n"
}

export VM_CNT=0
export NODE_ID=0
export NODE_ALL=0
export ROOT_DIR=$(dirname $(dirname $(readlink -e -v $0)))

source $ROOT_DIR/lib/env.sh
source $ROOT_DIR/lib/log.sh

# parse parameters
while getopts ":i:c:dha" opt; do
    case $opt in
    d) set -x;;
    c) export VM_CNT=$OPTARG;;
    i) export NODE_ID=$OPTARG;;
    a) export NODE_ALL=1;;
    h) usage $PROGRAM && exit 1;;
    ?) usage $PROGRAM && exit 1;;
    esac
done

shift $((OPTIND - 1))
command="${1}"
shift 1

lkp_loginit
for func in $(ls $ROOT_DIR/sbin);do
    [ "$func" == "$command" ] && {
        sh $ROOT_DIR/sbin/$command $@
        exit 0
    }
done

# generally, it will not run here
usage $PROGRAM
